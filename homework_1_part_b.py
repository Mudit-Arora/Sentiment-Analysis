# -*- coding: utf-8 -*-
"""Homework 1 Part B.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sUIn3Lxs7MkmB66_tNcZSxHX2-df2okN
"""

import os
import tarfile
import pandas as pd
import glob
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB, GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import LinearSVC
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score, classification_report

# Define the path to the tar.gz file
file_path = '/content/aclImdb_v1.tar.gz'
extract_path = '/content/aclImdb'

# Check if the file exists and then extract it
if os.path.exists(file_path):
    with tarfile.open(file_path, 'r:gz') as tar:
        tar.extractall(path=extract_path)
    print(f"Dataset extracted to {extract_path}")
else:
    print("File not found.")

def load_reviews_from_dir(directory, sentiment):
    reviews = []
    for filepath in glob.glob(os.path.join(directory, '*.txt')):
        with open(filepath, 'r', encoding='utf-8') as f:
            reviews.append((f.read(), sentiment))
    return reviews

train_pos = load_reviews_from_dir('/content/aclImdb/aclImdb/train/pos', 1)
train_neg = load_reviews_from_dir('/content/aclImdb/aclImdb/train/neg', 0)
train_data = train_pos + train_neg
train_dataset = pd.DataFrame(train_data, columns=['review', 'sentiment'])

test_pos = load_reviews_from_dir('/content/aclImdb/aclImdb/test/pos', 1)
test_neg = load_reviews_from_dir('/content/aclImdb/aclImdb/test/neg', 0)
test_data = test_pos + test_neg
test_dataset = pd.DataFrame(test_data, columns=['review', 'sentiment'])

train_dataset.to_csv('train_data.csv', index=False)
test_dataset.to_csv('test_data.csv', index=False)

train_dataset.head()

test_dataset.head()

X = train_dataset['review']
y = train_dataset['sentiment']

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=42, shuffle=True)

vectorizer = CountVectorizer(ngram_range=(1, 3))
X_train = vectorizer.fit_transform(X_train)
X_val = vectorizer.transform(X_val)

# Model 1 - Naive Bayes
classifier_NB = MultinomialNB()
classifier_NB.fit(X_train, y_train)
y_pred = classifier_NB.predict(X_val)

# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_val, y_pred))
print(confusion_matrix(y_val, y_pred))

# Model 2 - Linear SVM
classifier_SVM = LinearSVC()
classifier_SVM.fit(X_train, y_train)
y_pred = classifier_SVM.predict(X_val)

# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_val, y_pred))
print(confusion_matrix(y_val, y_pred))

# Model 3 - Decision Tree
classifier_DT = DecisionTreeClassifier(criterion = 'gini', random_state = 42,max_depth=5)
classifier_DT.fit(X_train, y_train)

y_pred = classifier_DT.predict(X_val)
# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_val, y_pred))
print(confusion_matrix(y_val, y_pred))

# Model 4 - Logistic Regression
classifier_LR = LogisticRegression(random_state=42).fit(X_train,y_train)
y_pred = classifier_LR.predict(X_val)

# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_val, y_pred))
print(confusion_matrix(y_val, y_pred))

# Model 5 - KNN
classifier_knn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier_knn.fit(X_train, y_train)

y_pred = classifier_knn.predict(X_val)
# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_val, y_pred))
print(confusion_matrix(y_val, y_pred))

X = test_dataset['review']
y = test_dataset['sentiment']

X_test = vectorizer.transform(X)
y_test_pred = classifier_SVM.predict(X_test)
accuracy = accuracy_score(y, y_test_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y, y_test_pred))
print(confusion_matrix(y, y_test_pred))

X = test_dataset['review']
y = test_dataset['sentiment']

X_test = vectorizer.transform(X)
y_test_pred = classifier_LR.predict(X_test)
accuracy = accuracy_score(y, y_test_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y, y_test_pred))
print(confusion_matrix(y, y_test_pred))